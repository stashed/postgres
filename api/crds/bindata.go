// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashpostgreses.v1.yaml
// installer.stash.appscode.com_stashpostgreses.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashpostgresesV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xe3\x36\x0f\xbe\xe7\x57\x10\x78\x0f\x7b\x79\xe3\x60\xd0\xa2\x28\x7c\x2b\xa6\x3d\x2c\xfa\xb5\xd8\x2c\xf6\xce\xc8\x8c\xc3\x8e\x2c\xa9\x24\x95\x76\xfa\xeb\x0b\xc9\xf6\x4c\xe2\x64\xd2\x6e\x80\xea\x14\xf1\xe3\x11\xf9\x3c\x94\x62\x4c\xfc\x99\x44\x39\x86\x16\x30\x31\xfd\x69\x14\xca\x4e\x9b\xa7\x6f\xb5\xe1\xb8\x39\x3e\xac\x9e\x38\x74\x2d\x3c\x66\xb5\x38\x7c\x24\x8d\x59\x1c\x7d\x4f\x7b\x0e\x6c\x1c\xc3\x6a\x20\xc3\x0e\x0d\xdb\x15\x80\x13\xc2\x62\xfc\xc4\x03\xa9\xe1\x90\x5a\x08\xd9\xfb\x15\x80\xc7\x1d\x79\x2d\x31\x00\x98\x52\x0b\x6a\xa8\x87\x15\x40\xc0\x81\xa6\x5d\x8a\x6a\xbd\x90\x92\x36\x1c\xd4\xd0\x7b\x92\xa6\x7a\x1a\x4c\x49\x5d\xec\xa8\x71\x71\x58\x69\x22\x57\x90\x7a\x89\x39\xb5\x70\x33\x76\x3c\x60\x3a\xd8\xa1\x51\x1f\x85\xe7\xfd\xfa\xa5\x8a\xf2\x7b\xce\xab\xdb\xb1\xe9\x6d\x71\x7f\x98\xca\xaa\x76\xcf\x6a\x3f\x5e\xfa\x7e\x62\xb5\xea\x4f\x3e\x0b\xfa\x8b\x86\xaa\x4f\x39\xf4\xd9\xa3\x2c\xbc\x2b\x00\x75\x31\x51\x0b\xbf\x94\x52\x13\x3a\xea\x56\x00\xc7\x51\x97\x5a\xea\x7a\xa2\xe9\xf8\x80\x3e\x1d\xf0\x61\x84\x73\x07\x1a\x70\xec\x04\x20\x26\x0a\xdf\x7d\x78\xff\xf9\xab\xed\x99\x19\x20\x49\x4c\x24\xf6\xd2\xf4\xb8\x4e\x84\x3f\xb1\x02\x74\xa4\x4e\x38\x59\x9d\x88\x77\x05\x70\x8c\x82\xae\x28\x4e\x0a\x76\xa0\xb9\x34\xea\xa6\x1a\x20\xee\xc1\x0e\xac\x20\x94\x4a\xbb\xc1\xea\x14\x9c\x01\x43\x09\xc2\x00\x71\xf7\x1b\x39\x6b\x60\x4b\x52\x60\x40\x0f\x31\xfb\x0e\x5c\x0c\x47\x12\x03\x21\x17\xfb\xc0\x7f\xbd\x60\x2b\x58\xac\x87\x7a\x34\x9a\x48\x7e\x5d\x1c\x8c\x24\xa0\x87\x23\xfa\x4c\xff\x07\x0c\x1d\x0c\xf8\x0c\x42\xe5\x14\xc8\xe1\x04\xaf\x86\x68\x03\x3f\x47\x21\xe0\xb0\x8f\x2d\x1c\xcc\x92\xb6\x9b\x4d\xcf\x36\x0f\xbc\x8b\xc3\x90\x03\xdb\xf3\xc6\xc5\x60\xc2\xbb\x6c\x51\x74\xd3\xd1\x91\xfc\x46\xb9\x5f\xa3\xb8\x03\x1b\x39\xcb\x42\x1b\x4c\xbc\xae\xa5\x07\xab\xb7\x66\xe8\xfe\x27\xd3\x15\xd1\x77\x67\xb5\xda\x73\xaa\x73\x2e\x1c\xfa\x13\x47\x9d\xb3\x1b\x0a\x94\x59\x03\x56\xc0\x29\x75\xec\xe2\x95\xe8\x62\x2a\xec\x7c\xfc\x61\xfb\x09\xe6\xa3\xab\x18\x4b\xf6\x2b\xef\xaf\x89\xfa\x2a\x41\x21\x8c\xc3\x9e\x64\x14\x71\x2f\x71\xa8\x98\x14\xba\x14\x39\x58\xdd\x38\xcf\x14\x96\xf4\x6b\xde\x0d\x6c\x45\xf7\xdf\x33\xa9\x15\xad\x1a\x78\xc4\x10\xa2\xc1\x8e\x20\xa7\x0e\x8d\xba\x06\xde\x07\x78\xc4\x81\xfc\x23\x2a\xfd\xe7\x02\x14\xa6\x75\x5d\x88\xfd\x77\x12\x9c\x3e\x60\xcb\xe0\x91\xb5\x13\xc7\xfc\xf6\xbc\xa1\xd7\xd9\xa3\xb0\x4d\xe4\x8a\x76\x85\xbe\xe9\xa2\xec\xa3\x8c\x31\x30\x07\x4d\x63\xb9\x20\x76\xcf\x9e\xce\x4c\xd7\x6f\x71\x59\x3b\x74\x4f\x39\x2d\xad\xb7\x32\xca\x42\xe9\xaf\xda\xdf\x64\x69\x5e\x6e\xe8\xee\xc8\x7b\x83\xcd\xda\x6a\xf6\xbe\xbc\x6e\xbf\x1e\x49\x84\x3b\xba\x44\xbf\x81\xcc\x03\xf6\x57\x32\x6e\xf7\x2e\xd4\xb3\x9a\x3c\xdf\xd5\xbf\x50\x8a\xca\x16\xef\x4c\x37\xec\xef\xc8\x2b\xf7\x8b\x85\xae\x30\xbf\x7e\xe9\xe6\xaa\x6b\xae\xf5\x8a\xd3\xf0\x8b\x64\xba\x5b\x22\x21\xb5\x28\x5f\x2c\xd2\x9d\x03\x7a\xa3\x83\x3f\x90\xad\x7c\x98\xc4\x6c\x97\xc0\xfb\x28\x03\x5a\xf9\x98\xb0\x6f\xbe\x7e\x03\xb5\xfc\xd9\xf4\x24\xab\xf3\xee\xae\x29\xb3\x9e\x6e\xe5\xc2\x58\xa7\x75\x61\x9b\xe8\x59\x58\x4f\x6a\xfd\xe7\x57\xe9\xc2\xa8\xe5\x61\xef\x5a\x30\xc9\x23\x70\x39\xa2\x5c\x94\xd1\xf2\x77\x00\x00\x00\xff\xff\x4f\x98\xb7\xa2\xf5\x09\x00\x00")

func installerStashAppscodeCom_stashpostgresesV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashpostgresesV1Yaml,
		"installer.stash.appscode.com_stashpostgreses.v1.yaml",
	)
}

func installerStashAppscodeCom_stashpostgresesV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashpostgresesV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashpostgreses.v1.yaml", size: 2549, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashpostgresesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x8f\x1c\x35\x0c\x7f\xdf\x4f\x61\x09\xa4\x02\x62\x76\x39\x15\x55\x30\x2f\x08\x1d\x20\x55\x14\xa8\x7a\xa5\x2f\xa7\x22\x79\x33\xde\x59\x73\x99\x24\xd8\x9e\x6d\xef\x3e\x3d\x4a\x66\x66\x6f\xff\x1e\xbd\x93\xc8\xd3\xe4\xe7\x3f\xb1\x7f\xb6\x33\xc1\xc4\xef\x48\x94\x63\xa8\x01\x13\xd3\x47\xa3\x90\x77\x3a\xbf\xf9\x4e\xe7\x1c\x17\x9b\x8b\x25\x19\x5e\xcc\x6e\x38\x34\x35\x5c\xf6\x6a\xb1\x7b\x43\x1a\x7b\x71\xf4\x13\xad\x38\xb0\x71\x0c\xb3\x8e\x0c\x1b\x34\xac\x67\x00\x4e\x08\x33\xf8\x96\x3b\x52\xc3\x2e\xd5\x10\x7a\xef\x67\x00\x1e\x97\xe4\x35\xeb\x00\x60\x4a\x35\xa8\xa1\xae\x67\x00\x01\x3b\x1a\x77\x29\xaa\xb5\x42\x4a\x3a\xe7\xa0\x86\xde\x93\xcc\x8b\x64\x8e\x29\xa9\x8b\x0d\xcd\x5d\xec\x66\x9a\xc8\x65\x4f\xad\xc4\x3e\xd5\xf0\xa0\xee\x70\xc0\x78\xb0\x43\xa3\x36\x0a\x4f\xfb\x6a\x1b\x45\xfe\x9e\xec\xca\x76\x48\xfa\x2a\x8b\x5f\x8f\x61\x15\xdc\xb3\xda\xaf\xc7\xb2\x57\xac\x56\xe4\xc9\xf7\x82\xfe\x28\xa1\x22\x53\x0e\x6d\xef\x51\x0e\xa4\x33\x80\x94\x95\x64\x43\x7f\x86\x9b\x10\x3f\x84\x5f\x98\x7c\xa3\x35\xac\xd0\x6b\x0e\x47\x5d\x4c\x54\xc3\xef\x39\x93\x84\x8e\x9a\x19\xc0\x06\x3d\x37\x85\xec\x21\x97\x98\x28\xfc\xf8\xfa\xe5\xbb\xe7\x57\x6e\x4d\x1d\x0e\x60\xf6\x1c\x13\x89\x6d\x53\x1e\xf8\xdf\x56\x7e\x8b\x01\x34\xa4\x4e\x38\x15\x8f\xf0\x2c\xbb\x1a\x74\xa0\xc9\xb5\x26\x05\x5b\x13\x6c\x06\x8c\x1a\xd0\x72\x0c\xc4\x15\xd8\x9a\x15\x84\x4a\x0e\xc1\x4a\x48\x3b\x6e\x21\xab\x60\x80\xb8\xfc\x9b\x9c\xcd\xe1\x2a\xe7\x29\x0a\xba\x8e\xbd\x6f\xc0\xc5\xb0\x21\x31\x10\x72\xb1\x0d\x7c\xb7\xf5\xac\x60\xb1\x1c\xe9\xd1\x68\x24\x77\x5a\x1c\x8c\x24\xa0\xcf\x24\xf4\xf4\x35\x60\x68\xa0\xc3\x5b\x10\xca\x67\x40\x1f\x76\xbc\x15\x15\x9d\xc3\x6f\x51\x08\x38\xac\x62\x0d\x6b\xb3\xa4\xf5\x62\xd1\xb2\x4d\xbd\xee\x62\xd7\xf5\x81\xed\x76\xe1\x62\x30\xe1\x65\x6f\x51\x74\xd1\xd0\x86\xfc\x42\xb9\xad\x50\xdc\x9a\x8d\x9c\xf5\x42\x0b\x4c\x5c\x95\xc0\x83\x95\x81\xe9\x9a\xcf\x64\x1c\x0c\x7d\xb6\x13\xa9\xdd\xa6\xd2\xdb\xc2\xa1\xdd\xc2\xa5\xb3\xce\xf2\x9e\x7b\x0b\x58\x01\x47\xb3\x21\xfe\x7b\x7a\x33\x94\x59\x79\xf3\xf3\xd5\x5b\x98\x0e\x2d\x25\xd8\xe7\xbc\xb0\x7d\x6f\xa6\xf7\xc4\x67\xa2\x38\xac\x48\x86\xc2\xad\x24\x76\xc5\x23\x85\x26\x45\x0e\x56\x36\xce\x33\x85\x7d\xd2\xb5\x5f\x76\x6c\xb9\xd2\xff\xf4\xa4\x96\xeb\x33\x87\x4b\x0c\x21\x1a\x2c\x09\xfa\xd4\xa0\x51\x33\x87\x97\x01\x2e\xb1\x23\x7f\x89\x4a\xff\x3b\xed\x99\x61\xad\x32\xa5\xff\x4d\xfc\xee\x45\x35\xad\x53\xe3\x91\x57\xb9\x95\xf6\x10\x80\x0e\x3f\xbe\xa2\xd0\xda\xba\x86\x17\xcf\x0f\x64\x09\x2d\xb7\x64\x0d\x7f\x5d\x63\x75\xf7\xfe\x8b\xeb\x0a\xab\xbb\x6f\xaa\xef\xdf\x7f\x75\x3d\x7e\x7c\xf9\xc3\xe7\x07\x36\x27\x83\x9c\xe0\xa1\x80\x5b\x78\xba\xf2\x4e\x36\xcd\xde\x4d\x74\x95\xc8\xe5\x06\xca\x55\x1c\x67\x74\x15\x65\xd0\x81\x49\x69\x9c\x0a\x58\xb1\xa7\x4f\x60\x63\x89\xee\xa6\x4f\x87\x7c\x9c\xd3\xce\x0b\xa5\x3d\x81\x9e\xcd\x79\x58\xae\x6b\x1e\x69\x73\x92\xab\xbc\x56\xbd\xf7\xb9\x86\x7f\x6c\x48\x84\x9b\xa3\x5a\x9e\xf5\xc9\x1d\xb6\x47\xda\x0f\x65\x2a\xd4\xb2\x9a\xdc\x3e\x3a\x5b\xa1\x14\x95\x2d\x3e\xc1\xd4\xb0\x7d\xa4\x4d\x1e\x5a\x16\x3a\xe2\xb7\xda\xc6\x7f\x42\x30\xc5\x77\x24\x32\xfc\xe4\x42\x3c\xa9\x08\x42\x6a\x51\x1e\x55\x86\x27\x34\xdc\xd9\x98\x3f\x20\x5b\x7e\xc1\xc4\xde\x0e\x5d\xae\xa2\x74\x68\xf9\xcd\x61\x2f\xbe\x3d\xe9\x2f\xff\x9b\x5a\x92\xd9\x6e\x36\xc7\xdc\x57\xe3\x4c\xed\x41\xa5\xf7\xf6\x90\x91\x88\x3d\x6c\x27\xba\x87\x6f\x8d\x03\x68\x33\x3d\xf6\x36\x17\xe8\xd3\x1a\x2f\xee\xb1\xc2\x5c\x35\x3e\xc5\x76\xc4\x00\xe5\x55\xd2\xd4\x60\xd2\x0f\x51\xe4\x78\xf2\x84\x0c\xc8\xbf\x01\x00\x00\xff\xff\xcb\xef\x6f\xb6\x44\x0a\x00\x00")

func installerStashAppscodeCom_stashpostgresesYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashpostgresesYaml,
		"installer.stash.appscode.com_stashpostgreses.yaml",
	)
}

func installerStashAppscodeCom_stashpostgresesYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashpostgresesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashpostgreses.yaml", size: 2628, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashpostgreses.v1.yaml": installerStashAppscodeCom_stashpostgresesV1Yaml,
	"installer.stash.appscode.com_stashpostgreses.yaml":    installerStashAppscodeCom_stashpostgresesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashpostgreses.v1.yaml": {installerStashAppscodeCom_stashpostgresesV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashpostgreses.yaml":    {installerStashAppscodeCom_stashpostgresesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
