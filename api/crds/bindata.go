// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashpostgreses.v1.yaml
// installer.stash.appscode.com_stashpostgreses.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashpostgresesV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x8f\xe3\x36\x0c\xbd\xe7\x57\x10\xe8\x61\x2f\x8d\x83\x45\x2f\x85\x6f\xc5\xb4\x87\x45\xbf\x16\x9b\xc5\xde\x19\x89\x71\xd8\x91\x25\x95\xa4\x82\x4e\x7f\x7d\x21\xd9\x9e\x49\x32\x99\xb4\x1b\xa0\x3e\x59\xfc\x12\xdf\x7b\x14\x31\xf3\x17\x12\xe5\x14\x7b\xc0\xcc\xf4\x97\x51\xac\x27\xed\x1e\xbf\xd7\x8e\xd3\xe6\xf8\x7e\xf5\xc8\xd1\xf7\xf0\x50\xd4\xd2\xf8\x89\x34\x15\x71\xf4\x23\xed\x39\xb2\x71\x8a\xab\x91\x0c\x3d\x1a\xf6\x2b\x00\x27\x84\xd5\xf8\x99\x47\x52\xc3\x31\xf7\x10\x4b\x08\x2b\x80\x80\x3b\x0a\x5a\x63\x00\x30\xe7\x1e\xd4\x50\x0f\x2b\x80\x88\x23\xcd\xa7\x9c\xd4\x06\x21\x25\xed\x38\xaa\x61\x08\x24\x5d\xf3\x74\x98\xb3\xba\xe4\xa9\x73\x69\x5c\x69\x26\x57\x2b\x0d\x92\x4a\xee\xe1\x66\xec\x74\xc1\x7c\xb1\x43\xa3\x21\x09\x2f\xe7\xf5\x73\x17\xf5\x7f\xc9\x6b\xc7\x09\xf4\xb6\xba\x3f\xce\x6d\x35\x7b\x60\xb5\x9f\x5f\xfb\x7e\x61\xb5\xe6\xcf\xa1\x08\x86\x57\x80\x9a\x4f\x39\x0e\x25\xa0\x5c\x78\x57\x00\xea\x52\xa6\x1e\x7e\xab\xad\x66\x74\xe4\x57\x00\xc7\x49\x97\xd6\xea\x7a\xa6\xe9\xf8\x1e\x43\x3e\xe0\xfb\xa9\x9c\x3b\xd0\x88\x13\x12\x80\x94\x29\xfe\xf0\xf1\xc3\x97\xef\xb6\x67\x66\x80\x2c\x29\x93\xd8\x33\xe8\xe9\x3b\x11\xfe\xc4\x0a\xe0\x49\x9d\x70\xb6\x36\x11\xef\x6a\xc1\x29\x0a\x7c\x55\x9c\x14\xec\x40\x4b\x6b\xe4\xe7\x1e\x20\xed\xc1\x0e\xac\x20\x94\x2b\xdc\x68\x6d\x0a\xce\x0a\x43\x0d\xc2\x08\x69\xf7\x07\x39\xeb\x60\x4b\x52\xcb\x80\x1e\x52\x09\x1e\x5c\x8a\x47\x12\x03\x21\x97\x86\xc8\x7f\x3f\xd7\x56\xb0\xd4\x2e\x0d\x68\x34\x93\xfc\xf2\x71\x34\x92\x88\x01\x8e\x18\x0a\x7d\x0b\x18\x3d\x8c\xf8\x04\x42\xf5\x16\x28\xf1\xa4\x5e\x0b\xd1\x0e\x7e\x4d\x42\xc0\x71\x9f\x7a\x38\x98\x65\xed\x37\x9b\x81\x6d\x19\x78\x97\xc6\xb1\x44\xb6\xa7\x8d\x4b\xd1\x84\x77\xc5\x92\xe8\xc6\xd3\x91\xc2\x46\x79\x58\xa3\xb8\x03\x1b\x39\x2b\x42\x1b\xcc\xbc\x6e\xad\x47\x6b\xaf\x66\xf4\xdf\xc8\xfc\x44\xf4\xdd\x59\xaf\xf6\x94\xdb\x9c\x0b\xc7\xe1\xc4\xd1\xe6\xec\x86\x02\x75\xd6\x80\x15\x70\x4e\x9d\x50\xbc\x10\x5d\x4d\x95\x9d\x4f\x3f\x6d\x3f\xc3\x72\x75\x13\xe3\x92\xfd\xc6\xfb\x4b\xa2\xbe\x48\x50\x09\xe3\xb8\x27\x99\x44\xdc\x4b\x1a\x5b\x4d\x8a\x3e\x27\x8e\xd6\x0e\x2e\x30\xc5\x4b\xfa\xb5\xec\x46\xb6\xaa\xfb\x9f\x85\xd4\xaa\x56\x1d\x3c\x60\x8c\xc9\x60\x47\x50\xb2\x47\x23\xdf\xc1\x87\x08\x0f\x38\x52\x78\x40\xa5\xff\x5d\x80\xca\xb4\xae\x2b\xb1\xff\x4d\x82\xd3\x05\x76\x19\x3c\xb1\x76\xe2\x58\x76\xcf\x1b\x7a\x9d\x2d\x85\x6d\x26\x57\xb5\xab\xf4\xcd\x0f\x65\x9f\x64\x8a\x81\x25\x68\x1e\xcb\x0b\x62\xf7\x1c\xe8\xcc\x74\xfd\x15\xd7\x6f\x87\xee\xb1\xe4\x4b\xeb\xad\x8c\xfa\xa1\x0c\x57\xed\x6f\xb2\xb4\x7c\x6e\xf4\x77\xe4\xbd\xc1\x66\x83\x5a\x42\xa8\xdb\xed\xf7\x23\x89\xb0\xa7\xd7\xd5\x6f\x54\xe6\x11\x87\x2b\x19\xb7\xb1\x0b\x0d\xac\x26\x4f\x77\xe1\x17\xca\x49\xd9\xd2\x9d\xe9\x86\xc3\x1d\x79\xf5\x7d\xb1\xd0\x15\xe6\xd7\xcf\x68\xae\xba\x96\x5e\xaf\x38\x0d\xbf\x4a\xa6\xbb\x25\x12\x52\x4b\xf2\xd5\x22\xdd\x39\xa0\x6f\x22\xb8\x4e\xe1\x7a\x7e\x3e\x17\xc6\x36\x56\x17\xb6\x19\xc7\xbf\x2f\x89\x57\x46\xad\x7b\xd6\xf7\x60\x52\xa6\xf4\x5a\xa8\xce\xed\x64\xf9\x27\x00\x00\xff\xff\x77\x7d\x57\x58\x84\x09\x00\x00")

func installerStashAppscodeCom_stashpostgresesV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashpostgresesV1Yaml,
		"installer.stash.appscode.com_stashpostgreses.v1.yaml",
	)
}

func installerStashAppscodeCom_stashpostgresesV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashpostgresesV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashpostgreses.v1.yaml", size: 2436, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashpostgresesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe4\x44\x13\xbe\xcf\xaf\x28\xe9\x7d\xa5\x05\x84\x3d\x44\x2b\x21\xf0\x05\xa1\x00\xd2\x8a\x05\x56\x9b\x65\x2f\xd1\x22\xd5\xb4\x6b\x3c\x45\xda\xdd\x4d\x55\x79\xd8\xe4\xd7\xa3\x6e\xdb\x93\xcc\x57\xd8\x44\xa2\x4f\xee\xa7\xbe\x9f\xaa\x6a\x19\x13\xbf\x27\x51\x8e\xa1\x01\x4c\x4c\x1f\x8d\x42\xbe\x69\x7d\xf3\x8d\xd6\x1c\x97\xdb\x8b\x15\x19\x5e\x2c\x6e\x38\xb4\x0d\x5c\x0e\x6a\xb1\x7f\x4b\x1a\x07\x71\xf4\x03\xad\x39\xb0\x71\x0c\x8b\x9e\x0c\x5b\x34\x6c\x16\x00\x4e\x08\x33\xf8\x8e\x7b\x52\xc3\x3e\x35\x10\x06\xef\x17\x00\x1e\x57\xe4\x35\xeb\x00\x60\x4a\x0d\xa8\xa1\x6e\x16\x00\x01\x7b\x9a\x6e\x29\xaa\x75\x42\x4a\x5a\x73\x50\x43\xef\x49\xea\x22\xa9\x31\x25\x75\xb1\xa5\xda\xc5\x7e\xa1\x89\x5c\xf6\xd4\x49\x1c\x52\x03\x8f\xea\x8e\x01\xa6\xc0\x0e\x8d\xba\x28\x3c\xdf\xab\x5d\x16\xf9\x7b\xb6\x2b\xd7\xb1\xe8\xab\x2c\x7e\x33\xa5\x55\x70\xcf\x6a\x3f\x1f\xcb\x5e\xb3\x5a\x91\x27\x3f\x08\xfa\xa3\x82\x8a\x4c\x39\x74\x83\x47\x39\x90\x2e\x00\x52\x56\x92\x2d\xfd\x1e\x6e\x42\xfc\x3b\xfc\xc4\xe4\x5b\x6d\x60\x8d\x5e\x73\x3a\xea\x62\xa2\x06\x7e\xcd\x95\x24\x74\xd4\x2e\x00\xb6\xe8\xb9\x2d\x64\x8f\xb5\xc4\x44\xe1\xfb\x37\xaf\xde\xbf\xbc\x72\x1b\xea\x71\x04\xb3\xe7\x98\x48\x6c\x57\xf2\xc8\xff\xae\xf3\x3b\x0c\xa0\x25\x75\xc2\xa9\x78\x84\x17\xd9\xd5\xa8\x03\x6d\xee\x35\x29\xd8\x86\x60\x3b\x62\xd4\x82\x96\x30\x10\xd7\x60\x1b\x56\x10\x2a\x35\x04\x2b\x29\x3d\x70\x0b\x59\x05\x03\xc4\xd5\x9f\xe4\xac\x86\xab\x5c\xa7\x28\xe8\x26\x0e\xbe\x05\x17\xc3\x96\xc4\x40\xc8\xc5\x2e\xf0\xdd\xce\xb3\x82\xc5\x12\xd2\xa3\xd1\x44\xee\x7c\x38\x18\x49\x40\x9f\x49\x18\xe8\x4b\xc0\xd0\x42\x8f\xb7\x20\x94\x63\xc0\x10\x1e\x78\x2b\x2a\x5a\xc3\x2f\x51\x08\x38\xac\x63\x03\x1b\xb3\xa4\xcd\x72\xd9\xb1\xcd\xb3\xee\x62\xdf\x0f\x81\xed\x76\xe9\x62\x30\xe1\xd5\x60\x51\x74\xd9\xd2\x96\xfc\x52\xb9\xab\x50\xdc\x86\x8d\x9c\x0d\x42\x4b\x4c\x5c\x95\xc4\x83\x95\x85\xe9\xdb\xff\xc9\xb4\x18\xfa\xe2\x41\xa6\x76\x9b\xca\x6c\x0b\x87\x6e\x07\x97\xc9\x3a\xcb\x7b\x9e\x2d\x60\x05\x9c\xcc\xc6\xfc\xef\xe9\xcd\x50\x66\xe5\xed\x8f\x57\xef\x60\x0e\x5a\x5a\xb0\xcf\x79\x61\xfb\xde\x4c\xef\x89\xcf\x44\x71\x58\x93\x8c\x8d\x5b\x4b\xec\x8b\x47\x0a\x6d\x8a\x1c\xac\x5c\x9c\x67\x0a\xfb\xa4\xeb\xb0\xea\xd9\x72\xa7\xff\x1a\x48\x2d\xf7\xa7\x86\x4b\x0c\x21\x1a\xac\x08\x86\xd4\xa2\x51\x5b\xc3\xab\x00\x97\xd8\x93\xbf\x44\xa5\xff\x9c\xf6\xcc\xb0\x56\x99\xd2\x7f\x27\xfe\xe1\x43\x35\x9f\x53\xeb\x91\x4f\x79\x95\xf6\x10\x80\x1e\x3f\xbe\xa6\xd0\xd9\xa6\x81\xaf\x5f\x1e\xc8\x12\x5a\x1e\xc9\x06\xfe\xb8\xc6\xea\xee\xc3\x67\xd7\x15\x56\x77\x5f\x55\xdf\x7e\xf8\xe2\x7a\xfa\xf8\xfc\xbb\xff\x1f\xd8\x9c\x4c\x72\x86\xc7\x06\xee\xe0\xf9\xc9\x3b\x39\x34\x7b\x2f\xd1\x55\x22\x97\x07\x28\x77\x71\xda\xd1\x75\x94\x51\x07\x66\xa5\x69\x2b\x60\xcd\x9e\x3e\x81\x8d\x15\xba\x9b\x21\x1d\xf2\x71\x4e\x3b\x1f\x94\xee\x04\x7a\xb6\xe6\xf1\xb8\xbe\x7d\xa2\xcd\x49\xae\xf2\x59\x0f\xde\xe7\x1e\xfe\xb6\x25\x11\x6e\x8f\x7a\x79\xd6\x27\xf7\xd8\x1d\x69\x3f\x56\xa9\x50\xc7\x6a\x72\xfb\xe4\x6a\x85\x52\x54\xb6\xf8\x0c\x53\xc3\xee\x89\x36\x79\x69\x59\xe8\x88\xdf\x6a\x97\xff\x09\xc1\x9c\xdf\x91\xc8\xf0\x93\x1b\xf1\xac\x26\x08\xa9\x45\x79\x52\x1b\x9e\x31\x70\x67\x72\x3e\x45\x55\x35\xad\xc0\x1e\x54\x46\x65\x0f\x99\xf2\x7e\x7c\x99\x0f\xa0\xed\xfc\x0f\xb6\xbd\x40\x9f\x36\x78\x71\x8f\x95\x82\xaa\xe9\x0f\xe9\x81\x18\xa0\xfc\x2c\xb4\x0d\x98\x0c\x63\xb4\x1c\x37\x0f\xee\x88\xfc\x13\x00\x00\xff\xff\x98\xc1\xf1\x0b\xdb\x09\x00\x00")

func installerStashAppscodeCom_stashpostgresesYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashpostgresesYaml,
		"installer.stash.appscode.com_stashpostgreses.yaml",
	)
}

func installerStashAppscodeCom_stashpostgresesYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashpostgresesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashpostgreses.yaml", size: 2523, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashpostgreses.v1.yaml": installerStashAppscodeCom_stashpostgresesV1Yaml,
	"installer.stash.appscode.com_stashpostgreses.yaml":    installerStashAppscodeCom_stashpostgresesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashpostgreses.v1.yaml": &bintree{installerStashAppscodeCom_stashpostgresesV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashpostgreses.yaml":    &bintree{installerStashAppscodeCom_stashpostgresesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
