// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashpostgreses.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashpostgresesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x8f\xdc\x34\x10\x7f\xdf\x4f\x31\x12\x48\x05\x44\xb2\x9c\x2a\x21\xc8\x0b\x42\x07\x48\x15\x05\xaa\x6e\xe9\xcb\xa9\x48\xb3\xf6\x6c\x76\x38\xc7\x36\x9e\x49\xe8\xdd\xa7\x47\x76\x92\xbd\xfd\x7b\xf4\x2a\xf0\xd3\xfa\x37\xff\x7f\x33\xe3\x0d\x46\x7e\x4b\x49\x38\xf8\x06\x30\x32\xbd\x57\xf2\xf9\x26\xf5\xed\x37\x52\x73\x58\x0e\x57\x6b\x52\xbc\x5a\xdc\xb2\xb7\x0d\x5c\xf7\xa2\xa1\x7b\x4d\x12\xfa\x64\xe8\x07\xda\xb0\x67\xe5\xe0\x17\x1d\x29\x5a\x54\x6c\x16\x00\x26\x11\x66\xf0\x0d\x77\x24\x8a\x5d\x6c\xc0\xf7\xce\x2d\x00\x1c\xae\xc9\x49\xd6\x01\xc0\x18\x1b\x10\x45\xd9\x2e\x00\x3c\x76\x34\xdd\x62\x10\x6d\x13\x09\x49\xcd\x5e\x14\x9d\xa3\x54\x17\x49\x8d\x31\x8a\x09\x96\x6a\x13\xba\x85\x44\x32\xd9\x53\x9b\x42\x1f\x1b\x78\x54\x77\x0c\x30\x05\x36\xa8\xd4\x86\xc4\xf3\xbd\xda\x65\x91\x7f\xcf\x76\xe5\x3a\x16\xbd\xca\xe2\x57\x53\x5a\x05\x77\x2c\xfa\xf3\xa9\xec\x25\x8b\x16\x79\x74\x7d\x42\x77\x52\x50\x91\x09\xfb\xb6\x77\x98\x8e\xa4\x0b\x80\x98\x95\xd2\x40\xbf\xfb\x5b\x1f\xfe\xf6\x3f\x31\x39\x2b\x0d\x6c\xd0\x49\x4e\x47\x4c\x88\xd4\xc0\xaf\xb9\x92\x88\x86\xec\x02\x60\x40\xc7\xb6\x90\x3d\xd6\x12\x22\xf9\xef\x5f\xbd\x78\xfb\x7c\x65\xb6\xd4\xe1\x08\x66\xcf\x21\x52\xd2\x5d\xc9\x23\xff\xbb\xce\xef\x30\x00\x4b\x62\x12\xc7\xe2\x11\x9e\x65\x57\xa3\x0e\xd8\xdc\x6b\x12\xd0\x2d\xc1\x30\x62\x64\x41\x4a\x18\x08\x1b\xd0\x2d\x0b\x24\x2a\x35\x78\x2d\x29\xed\xb9\x85\xac\x82\x1e\xc2\xfa\x4f\x32\x5a\xc3\x2a\xd7\x99\x04\x64\x1b\x7a\x67\xc1\x04\x3f\x50\x52\x48\x64\x42\xeb\xf9\x7e\xe7\x59\x40\x43\x09\xe9\x50\x69\x22\x77\x3e\xec\x95\x92\x47\x97\x49\xe8\xe9\x4b\x40\x6f\xa1\xc3\x3b\x48\x94\x63\x40\xef\xf7\xbc\x15\x15\xa9\xe1\x97\x90\x08\xd8\x6f\x42\x03\x5b\xd5\x28\xcd\x72\xd9\xb2\xce\xb3\x6e\x42\xd7\xf5\x9e\xf5\x6e\x69\x82\xd7\xc4\xeb\x5e\x43\x92\xa5\xa5\x81\xdc\x52\xb8\xad\x30\x99\x2d\x2b\x19\xed\x13\x2d\x31\x72\x55\x12\xf7\x5a\x16\xa6\xb3\x9f\xa4\x69\x31\xe4\xd9\x5e\xa6\x7a\x17\xcb\x6c\x27\xf6\xed\x0e\x2e\x93\x75\x91\xf7\x3c\x5b\xc0\x02\x38\x99\x8d\xf9\x3f\xd0\x9b\xa1\xcc\xca\xeb\x1f\x57\x6f\x60\x0e\x5a\x5a\x70\xc8\x79\x61\xfb\xc1\x4c\x1e\x88\xcf\x44\xb1\xdf\x50\x1a\x1b\xb7\x49\xa1\x2b\x1e\xc9\xdb\x18\xd8\x6b\xb9\x18\xc7\xe4\x0f\x49\x97\x7e\xdd\xb1\xe6\x4e\xff\xd5\x93\x68\xee\x4f\x0d\xd7\xe8\x7d\x50\x58\x13\xf4\xd1\xa2\x92\xad\xe1\x85\x87\x6b\xec\xc8\x5d\xa3\xd0\xff\x4e\x7b\x66\x58\xaa\x4c\xe9\xbf\x13\xbf\xff\x50\xcd\xe7\xdc\x7a\xe4\x53\x5e\xa5\x03\x04\xa0\xc3\xf7\x2f\xc9\xb7\xba\x6d\xe0\xeb\xe7\x47\xb2\x88\x9a\x47\xb2\x81\x3f\x6e\xb0\xba\x7f\xf7\xd9\x4d\x85\xd5\xfd\x57\xd5\xb7\xef\xbe\xb8\x99\x7e\x7c\xfe\xdd\xa7\x47\x36\x67\x93\x9c\xe1\xb1\x81\x3b\x78\x7e\xf2\xce\x0e\xcd\xc1\x4b\xb4\x8a\x64\xf2\x00\xe5\x2e\x4e\x3b\xba\x09\x69\xd4\x81\x59\x69\xda\x0a\xd8\xb0\xa3\x0f\x60\x63\x8d\xe6\xb6\x8f\xc7\x7c\x5c\xd2\xce\x07\x53\x7b\x06\xbd\x58\xf3\xc5\xba\xf3\xd9\xf4\xce\xe5\x7e\xfc\x36\x50\x4a\x6c\x4f\xfa\x72\xd1\x27\x77\xd8\x9e\x68\x3f\x96\x75\xa2\x96\x45\xd3\xdd\x13\x33\xcf\x86\x31\x08\x6b\xf8\x08\x53\xc5\xf6\x89\x36\x79\x01\x39\x91\x3d\x36\xab\x76\xf9\x9f\x11\xcc\xf9\x9d\x88\x14\x3f\xb8\x11\x1f\xd5\x84\x44\xa2\x21\x3d\xa9\x0d\xff\xdd\xf0\x9c\xa3\xaa\x9a\xc6\xf9\x00\x2a\xa3\x72\x80\x4c\x79\x3f\xbe\x98\x47\xd0\x30\x7f\x4f\x0d\x57\xe8\xe2\x16\xaf\x1e\xb0\x52\x50\x35\x7d\xed\xec\x89\x01\xca\x1f\xbf\x6d\x40\x53\x3f\x46\xcb\x71\xf3\xe0\x8e\xc8\x3f\x01\x00\x00\xff\xff\xb9\x58\x06\xad\xa7\x09\x00\x00")

func installerStashAppscodeCom_stashpostgresesYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashpostgresesYaml,
		"installer.stash.appscode.com_stashpostgreses.yaml",
	)
}

func installerStashAppscodeCom_stashpostgresesYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashpostgresesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashpostgreses.yaml", size: 2471, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashpostgreses.yaml": installerStashAppscodeCom_stashpostgresesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashpostgreses.yaml": &bintree{installerStashAppscodeCom_stashpostgresesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
