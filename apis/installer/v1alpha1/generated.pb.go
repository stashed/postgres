/*
Copyright The Stash Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stash.appscode.dev/postgres/apis/installer/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *ImageRef) Reset()      { *m = ImageRef{} }
func (*ImageRef) ProtoMessage() {}
func (*ImageRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_88259ff085b7e726, []int{0}
}
func (m *ImageRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ImageRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRef.Merge(m, src)
}
func (m *ImageRef) XXX_Size() int {
	return m.Size()
}
func (m *ImageRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRef.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRef proto.InternalMessageInfo

func (m *PostgresBackup) Reset()      { *m = PostgresBackup{} }
func (*PostgresBackup) ProtoMessage() {}
func (*PostgresBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_88259ff085b7e726, []int{1}
}
func (m *PostgresBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresBackup.Merge(m, src)
}
func (m *PostgresBackup) XXX_Size() int {
	return m.Size()
}
func (m *PostgresBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresBackup.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresBackup proto.InternalMessageInfo

func (m *PostgresRestore) Reset()      { *m = PostgresRestore{} }
func (*PostgresRestore) ProtoMessage() {}
func (*PostgresRestore) Descriptor() ([]byte, []int) {
	return fileDescriptor_88259ff085b7e726, []int{2}
}
func (m *PostgresRestore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgresRestore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgresRestore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresRestore.Merge(m, src)
}
func (m *PostgresRestore) XXX_Size() int {
	return m.Size()
}
func (m *PostgresRestore) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresRestore.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresRestore proto.InternalMessageInfo

func (m *StashPostgres) Reset()      { *m = StashPostgres{} }
func (*StashPostgres) ProtoMessage() {}
func (*StashPostgres) Descriptor() ([]byte, []int) {
	return fileDescriptor_88259ff085b7e726, []int{3}
}
func (m *StashPostgres) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StashPostgres) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StashPostgres) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StashPostgres.Merge(m, src)
}
func (m *StashPostgres) XXX_Size() int {
	return m.Size()
}
func (m *StashPostgres) XXX_DiscardUnknown() {
	xxx_messageInfo_StashPostgres.DiscardUnknown(m)
}

var xxx_messageInfo_StashPostgres proto.InternalMessageInfo

func (m *StashPostgresList) Reset()      { *m = StashPostgresList{} }
func (*StashPostgresList) ProtoMessage() {}
func (*StashPostgresList) Descriptor() ([]byte, []int) {
	return fileDescriptor_88259ff085b7e726, []int{4}
}
func (m *StashPostgresList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StashPostgresList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StashPostgresList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StashPostgresList.Merge(m, src)
}
func (m *StashPostgresList) XXX_Size() int {
	return m.Size()
}
func (m *StashPostgresList) XXX_DiscardUnknown() {
	xxx_messageInfo_StashPostgresList.DiscardUnknown(m)
}

var xxx_messageInfo_StashPostgresList proto.InternalMessageInfo

func (m *StashPostgresSpec) Reset()      { *m = StashPostgresSpec{} }
func (*StashPostgresSpec) ProtoMessage() {}
func (*StashPostgresSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_88259ff085b7e726, []int{5}
}
func (m *StashPostgresSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StashPostgresSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StashPostgresSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StashPostgresSpec.Merge(m, src)
}
func (m *StashPostgresSpec) XXX_Size() int {
	return m.Size()
}
func (m *StashPostgresSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StashPostgresSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StashPostgresSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ImageRef)(nil), "stash.appscode.dev.postgres.apis.installer.v1alpha1.ImageRef")
	proto.RegisterType((*PostgresBackup)(nil), "stash.appscode.dev.postgres.apis.installer.v1alpha1.PostgresBackup")
	proto.RegisterType((*PostgresRestore)(nil), "stash.appscode.dev.postgres.apis.installer.v1alpha1.PostgresRestore")
	proto.RegisterType((*StashPostgres)(nil), "stash.appscode.dev.postgres.apis.installer.v1alpha1.StashPostgres")
	proto.RegisterType((*StashPostgresList)(nil), "stash.appscode.dev.postgres.apis.installer.v1alpha1.StashPostgresList")
	proto.RegisterType((*StashPostgresSpec)(nil), "stash.appscode.dev.postgres.apis.installer.v1alpha1.StashPostgresSpec")
}

func init() {
	proto.RegisterFile("stash.appscode.dev/postgres/apis/installer/v1alpha1/generated.proto", fileDescriptor_88259ff085b7e726)
}

var fileDescriptor_88259ff085b7e726 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcf, 0x6f, 0xd3, 0x3e,
	0x14, 0x6f, 0xd6, 0x76, 0xeb, 0xd7, 0xdd, 0xaf, 0xaf, 0xc5, 0x21, 0x9a, 0x44, 0x36, 0xf5, 0xb4,
	0x03, 0x38, 0xac, 0x43, 0x68, 0x17, 0x0e, 0x64, 0xd3, 0xa4, 0x49, 0xc0, 0x90, 0xc7, 0x09, 0x71,
	0xc0, 0x4d, 0xdf, 0xdc, 0xd0, 0xa6, 0xb6, 0x6c, 0xb7, 0xd2, 0x6e, 0xdc, 0xb9, 0xf0, 0x67, 0xed,
	0xb8, 0x0b, 0xd2, 0x04, 0xd2, 0xc4, 0xc2, 0x3f, 0x82, 0xe2, 0x38, 0x5d, 0xbb, 0x0a, 0x31, 0x6d,
	0xb7, 0xf8, 0xf9, 0xf3, 0xe3, 0x7d, 0x9c, 0xf7, 0xd0, 0xbe, 0x36, 0x4c, 0xf7, 0x08, 0x93, 0x52,
	0xc7, 0xa2, 0x0b, 0xa4, 0x0b, 0xe3, 0x50, 0x0a, 0x6d, 0xb8, 0x02, 0x1d, 0x32, 0x99, 0xe8, 0x30,
	0x19, 0x6a, 0xc3, 0x06, 0x03, 0x50, 0xe1, 0x78, 0x87, 0x0d, 0x64, 0x8f, 0xed, 0x84, 0x1c, 0x86,
	0xa0, 0x98, 0x81, 0x2e, 0x91, 0x4a, 0x18, 0x81, 0x77, 0xe7, 0x45, 0x48, 0x29, 0x42, 0x72, 0x11,
	0x32, 0x11, 0x21, 0xa5, 0xc8, 0xc6, 0x53, 0x9e, 0x98, 0xde, 0xa8, 0x43, 0x62, 0x91, 0x86, 0x5c,
	0x70, 0x11, 0x5a, 0xad, 0xce, 0xe8, 0xd4, 0x9e, 0xec, 0xc1, 0x7e, 0x15, 0x1e, 0x1b, 0xcf, 0xfb,
	0x7b, 0x9a, 0x24, 0x22, 0xef, 0x29, 0x65, 0x71, 0x2f, 0x19, 0x82, 0x3a, 0x0b, 0x65, 0x9f, 0x17,
	0x4d, 0xa6, 0x60, 0x58, 0x38, 0x9e, 0xeb, 0x6c, 0x23, 0xfc, 0x1b, 0x4b, 0x8d, 0x86, 0x26, 0x49,
	0x61, 0x8e, 0xf0, 0xe2, 0x5f, 0x04, 0x1d, 0xf7, 0x20, 0x65, 0xb7, 0x79, 0xad, 0xaf, 0x1e, 0x6a,
	0x1c, 0xa5, 0x8c, 0x03, 0x85, 0x53, 0xfc, 0x04, 0x35, 0x14, 0xf0, 0x44, 0x1b, 0x75, 0xe6, 0x7b,
	0x5b, 0xde, 0xf6, 0x7f, 0xd1, 0xfa, 0xf9, 0xd5, 0x66, 0x25, 0xbb, 0xda, 0x6c, 0x50, 0x57, 0xa7,
	0x13, 0x04, 0x6e, 0x23, 0xa4, 0x40, 0x0a, 0x9d, 0x18, 0xa1, 0xce, 0xfc, 0x05, 0x8b, 0xc7, 0x0e,
	0x8f, 0xe8, 0xe4, 0x86, 0x4e, 0xa1, 0xf0, 0x63, 0x54, 0x35, 0x8c, 0xfb, 0x55, 0x0b, 0x6e, 0x3a,
	0x70, 0xf5, 0x3d, 0xe3, 0x34, 0xaf, 0xb7, 0xda, 0x68, 0xf5, 0x9d, 0x7b, 0xff, 0x88, 0xc5, 0xfd,
	0x91, 0xc4, 0x5b, 0xa8, 0xc6, 0x14, 0xd7, 0xae, 0x9d, 0x65, 0xc7, 0xa8, 0xbd, 0x52, 0x5c, 0x53,
	0x7b, 0xd3, 0xda, 0x45, 0x6b, 0x25, 0x87, 0x82, 0x36, 0x42, 0xc1, 0x1d, 0x48, 0x3f, 0x3d, 0xb4,
	0x72, 0x92, 0xff, 0xfc, 0x92, 0x8a, 0x3f, 0xa1, 0x46, 0xfe, 0x33, 0xba, 0xcc, 0x30, 0xcb, 0x6b,
	0xb6, 0x9f, 0x91, 0xe2, 0x4d, 0xc9, 0xf4, 0x9b, 0x12, 0xd9, 0xe7, 0xc5, 0x68, 0xe4, 0x68, 0x32,
	0xde, 0x21, 0xc7, 0x9d, 0xcf, 0x10, 0x9b, 0x37, 0x60, 0xd8, 0x4d, 0xfa, 0x9b, 0x1a, 0x9d, 0xa8,
	0xe2, 0x1e, 0xaa, 0x69, 0x09, 0xb1, 0x7d, 0xa9, 0x66, 0xfb, 0x90, 0xdc, 0x63, 0xf8, 0xc8, 0x4c,
	0xcf, 0x27, 0x12, 0xe2, 0x9b, 0x74, 0xf9, 0x89, 0x5a, 0x87, 0xd6, 0x0f, 0x0f, 0xfd, 0x3f, 0x83,
	0x7c, 0x9d, 0x68, 0x83, 0x3f, 0xce, 0x25, 0x24, 0x77, 0x4b, 0x98, 0xb3, 0x6d, 0xbe, 0xc9, 0x34,
	0x94, 0x95, 0xa9, 0x74, 0x1c, 0xd5, 0x13, 0x03, 0xa9, 0xf6, 0x17, 0xb6, 0xaa, 0xdb, 0xcd, 0x76,
	0xf4, 0xf0, 0x78, 0xd1, 0x8a, 0xb3, 0xab, 0x1f, 0xe5, 0xc2, 0xb4, 0xd0, 0x6f, 0x7d, 0xaf, 0xde,
	0x0a, 0x97, 0x07, 0xc7, 0x7b, 0x68, 0x79, 0xc8, 0x52, 0x38, 0x1e, 0x83, 0x52, 0x49, 0x17, 0xdc,
	0xaf, 0x7f, 0xe4, 0x14, 0x96, 0xdf, 0x4e, 0xdd, 0xd1, 0x19, 0x24, 0x3e, 0x40, 0xeb, 0xa7, 0xa3,
	0xc1, 0x60, 0x86, 0x5d, 0x0c, 0xb3, 0xef, 0xd8, 0xeb, 0x87, 0xb7, 0xee, 0xe9, 0x1c, 0x03, 0x77,
	0x50, 0x3d, 0xc9, 0xd7, 0xc8, 0x8e, 0x76, 0xb3, 0xfd, 0xf2, 0x5e, 0xf1, 0xcb, 0x45, 0x9c, 0x4a,
	0x6e, 0x2b, 0x85, 0x34, 0xee, 0xa3, 0xc5, 0x8e, 0xdd, 0x0a, 0xbf, 0x66, 0x4d, 0xf6, 0xef, 0x65,
	0x32, 0xbb, 0x60, 0xd1, 0xaa, 0xb3, 0x5a, 0x2c, 0xce, 0xd4, 0x59, 0x60, 0x81, 0x96, 0x54, 0xb1,
	0x4e, 0x7e, 0xdd, 0xba, 0x1d, 0x3c, 0xc8, 0xcd, 0xad, 0x66, 0xb4, 0xe6, 0xec, 0x96, 0x5c, 0x81,
	0x96, 0x2e, 0x11, 0x39, 0xbf, 0x0e, 0x2a, 0x17, 0xd7, 0x41, 0xe5, 0xf2, 0x3a, 0xa8, 0x7c, 0xc9,
	0x02, 0xef, 0x3c, 0x0b, 0xbc, 0x8b, 0x2c, 0xf0, 0x2e, 0xb3, 0xc0, 0xfb, 0x95, 0x05, 0xde, 0xb7,
	0xdf, 0x41, 0xe5, 0x43, 0xa3, 0x54, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xcd, 0x6f, 0x74,
	0x02, 0x06, 0x00, 0x00,
}

func (m *ImageRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Tag)
	copy(dAtA[i:], m.Tag)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Tag)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Repository)
	copy(dAtA[i:], m.Repository)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Repository)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Registry)
	copy(dAtA[i:], m.Registry)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Registry)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Args)
	copy(dAtA[i:], m.Args)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Args)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgresRestore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgresRestore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgresRestore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Args)
	copy(dAtA[i:], m.Args)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Args)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StashPostgres) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StashPostgres) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StashPostgres) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StashPostgresList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StashPostgresList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StashPostgresList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StashPostgresSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StashPostgresSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StashPostgresSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Restore.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Backup.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.FullnameOverride)
	copy(dAtA[i:], m.FullnameOverride)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FullnameOverride)))
	i--
	dAtA[i] = 0x12
	i -= len(m.NameOverride)
	copy(dAtA[i:], m.NameOverride)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NameOverride)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Registry)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Repository)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Tag)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Args)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PostgresRestore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Args)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StashPostgres) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StashPostgresList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *StashPostgresSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameOverride)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.FullnameOverride)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Image.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Backup.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Restore.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRef{`,
		`Registry:` + fmt.Sprintf("%v", this.Registry) + `,`,
		`Repository:` + fmt.Sprintf("%v", this.Repository) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresBackup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresBackup{`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgresRestore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgresRestore{`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StashPostgres) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StashPostgres{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "StashPostgresSpec", "StashPostgresSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StashPostgresList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]StashPostgres{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "StashPostgres", "StashPostgres", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&StashPostgresList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *StashPostgresSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StashPostgresSpec{`,
		`NameOverride:` + fmt.Sprintf("%v", this.NameOverride) + `,`,
		`FullnameOverride:` + fmt.Sprintf("%v", this.FullnameOverride) + `,`,
		`Image:` + strings.Replace(strings.Replace(this.Image.String(), "ImageRef", "ImageRef", 1), `&`, ``, 1) + `,`,
		`Backup:` + strings.Replace(strings.Replace(this.Backup.String(), "PostgresBackup", "PostgresBackup", 1), `&`, ``, 1) + `,`,
		`Restore:` + strings.Replace(strings.Replace(this.Restore.String(), "PostgresRestore", "PostgresRestore", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repository = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgresRestore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgresRestore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgresRestore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StashPostgres) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StashPostgres: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StashPostgres: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StashPostgresList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StashPostgresList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StashPostgresList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, StashPostgres{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StashPostgresSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StashPostgresSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StashPostgresSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameOverride = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullnameOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullnameOverride = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Backup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Restore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGenerated
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)
