/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package stash.appscode.dev.apimachinery.apis.stash.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/objectstore-api/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AllowedNamespaces indicate which namespaces the resource should be selected from.
message AllowedNamespaces {
  // From indicates how to select the namespaces that are allowed to use this resource.
  // Possible values are:
  // * All: All namespaces can use this resource.
  // * Selector: Namespaces that matches the selector can use this resource.
  // * Same: Only current namespace can use the resource.
  //
  // +optional
  // +kubebuilder:default=Same
  optional string from = 1;

  // Selector must be specified when From is set to "Selector". In that case,
  // only the selected namespaces are allowed to use this resource.
  // This field is ignored for other values of "From".
  //
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;
}

// LocalTypedReference contains enough information to let you inspect or modify the referred object.
message LocalTypedReference {
  // Kind of the referent.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  // +optional
  optional string kind = 1;

  // Name of the referent.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  // +optional
  optional string name = 2;

  // API version of the referent.
  // +optional
  optional string apiVersion = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=repositories,singular=repository,shortName=repo,categories={stash,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Integrity",type="boolean",JSONPath=".status.integrity"
// +kubebuilder:printcolumn:name="Size",type="string",JSONPath=".status.totalSize"
// +kubebuilder:printcolumn:name="Snapshot-Count",type="integer",JSONPath=".status.snapshotCount"
// +kubebuilder:printcolumn:name="Last-Successful-Backup",type="date",format="date-time",JSONPath=".status.lastBackupTime"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Repository {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RepositorySpec spec = 2;

  optional RepositoryStatus status = 3;
}

message RepositoryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Repository items = 2;
}

message RepositorySpec {
  // Backend specify the storage where backed up snapshot will be stored
  optional kmodules.xyz.objectstore_api.api.v1.Backend backend = 1;

  // If true, delete respective restic repository
  // +optional
  optional bool wipeOut = 2;

  // UsagePolicy specifies a policy of how this Repository will be used. For example, you can use `allowedNamespaces`
  // policy to restrict the usage of this Repository to particular namespaces.
  // This field is optional. If you don't provide the usagePolicy, then it can be used only from the current namespace.
  // +optional
  optional UsagePolicy usagePolicy = 3;
}

message RepositoryStatus {
  // ObservedGeneration is the most recent generation observed for this Repository. It corresponds to the
  // Repository's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // FirstBackupTime indicates the timestamp when the first backup was taken
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time firstBackupTime = 2;

  // LastBackupTime indicates the timestamp when the latest backup was taken
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastBackupTime = 3;

  // Integrity shows result of repository integrity check after last backup
  optional bool integrity = 4;

  // TotalSize show size of repository after last backup
  optional string totalSize = 11;

  // SnapshotCount shows number of snapshots stored in the repository
  optional int64 snapshotCount = 6;

  // SnapshotsRemovedOnLastCleanup shows number of old snapshots cleaned up according to retention policy on last backup session
  optional int64 snapshotsRemovedOnLastCleanup = 7;
}

message RetentionPolicy {
  optional string name = 1;

  optional int64 keepLast = 2;

  optional int64 keepHourly = 3;

  optional int64 keepDaily = 4;

  optional int64 keepWeekly = 5;

  optional int64 keepMonthly = 6;

  optional int64 keepYearly = 7;

  repeated string keepTags = 8;

  optional bool prune = 9;

  optional bool dryRun = 10;
}

// UsagePolicy specifies a policy that restrict the usage of a resource across namespaces.
message UsagePolicy {
  // AllowedNamespaces specifies which namespaces are allowed to use the resource
  // +optional
  optional AllowedNamespaces allowedNamespaces = 1;
}

